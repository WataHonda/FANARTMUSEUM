以下の条件を満たすWEBページを作成したい

・ページタイトル：ファンアート美術館

・メニューバー：このサイトについて、投稿する、問合せ

・ページの背景：美術館の回廊風

・投稿された画像ファイル（jpeg, pngなど）を額縁風のフレームに入れ1枚1枚掲載

　・投稿される画像サイズに合わせてフレームを作成する

　・投稿された最新のものが最も左に来るようにする

　・フレームの左端にマウスのポインターを合わせると左にスクロールする

　・フレームの右端にマウスのポインターを合わせると右にスクロールする

・画像（作品）投稿フォームに必要な要素

　・作品タイトル

　・作者名（アーティスト名）

　・ファイルアップロード欄




Show thinking
はい、承知いたしました。「ファンアート美術館」というテーマで、ご要望の機能を備えたWEBページを作成するための基本的な構成とコードの骨子を以下に提案します。

これを実現するには、主に以下の技術要素が必要になります。

HTML: ページの構造を定義します。
CSS: ページの見た目（デザイン、レイアウト）を設定します。
JavaScript: ページに動的な機能（画像のスクロール、フレームのサイズ調整など）を追加します。
注意点：

実際にユーザーが画像をアップロードし、それがサーバーに保存されて他のユーザーにも表示されるようにするには、サーバーサイドのプログラミング（例：PHP, Python (Flask/Django), Node.jsなど）とデータベースの知識が必要になります。ここでの説明は、主にページの見た目とフロントエンドの動作に焦点を当てています。
美術館の回廊風の背景画像や、額縁風のフレームデザインは、具体的な画像素材や詳細なデザイン指示によってクオリティが大きく左右されます。ここでは基本的な実装方法を示します。
WEBページ構成案
1. ページタイトルと基本構造 (HTML: index.html)
HTML

<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ファンアート美術館</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <header>
        <nav>
            <ul>
                <li><a href="#about">このサイトについて</a></li>
                <li><a href="#post">投稿する</a></li>
                <li><a href="#contact">問合せ</a></li>
            </ul>
        </nav>
    </header>

    <main>
        <section id="gallery" class="gallery-container">
            </section>

        <section id="post" class="post-form-section">
            <h2>作品を投稿する</h2>
            <form id="artworkForm">
                <div>
                    <label for="artworkTitle">作品タイトル:</label>
                    <input type="text" id="artworkTitle" name="artworkTitle" required>
                </div>
                <div>
                    <label for="artistName">作者名（アーティスト名）:</label>
                    <input type="text" id="artistName" name="artistName" required>
                </div>
                <div>
                    <label for="artworkFile">ファイルアップロード:</label>
                    <input type="file" id="artworkFile" name="artworkFile" accept="image/jpeg, image/png" required>
                </div>
                <button type="submit">投稿する</button>
            </form>
        </section>

        <section id="about" class="content-section">
            <h2>このサイトについて</h2>
            <p>ファンアートを展示するオンライン美術館です。</p>
            </section>

        <section id="contact" class="content-section">
            <h2>問合せ</h2>
            <p>ご意見・ご要望はこちらまで。</p>
            </section>
    </main>

    <footer>
        <p>&copy; ファンアート美術館</p>
    </footer>

    <script src="script.js"></script>
</body>
</html>
2. スタイル設定 (CSS: style.css)
CSS

body {
    font-family: sans-serif;
    margin: 0;
    background-color: #f0f0f0; /* 仮の背景色 */
    /* 美術館の回廊風の背景画像を設定 */
    /* 例: background-image: url('path/to/corridor-background.jpg'); */
    /* background-size: cover; */
    /* background-attachment: fixed; */
}

header {
    background-color: #333;
    color: white;
    padding: 1em 0;
    text-align: center;
}

nav ul {
    list-style-type: none;
    padding: 0;
    margin: 0;
}

nav ul li {
    display: inline;
    margin-right: 20px;
}

nav ul li a {
    color: white;
    text-decoration: none;
}

main {
    padding: 20px;
}

.gallery-container {
    display: flex; /* 画像を横並びにする */
    overflow-x: hidden; /* 横スクロールバーを隠す（JavaScriptで制御） */
    overflow-y: hidden;
    white-space: nowrap; /* 画像が折り返さないようにする */
    padding: 20px 0;
    min-height: 400px; /* ギャラリーの高さを確保 */
    position: relative; /* スクロール検知エリアの基準とする */
    border: 1px solid #ccc; /* 境界線（デザインに応じて変更） */
    background-color: rgba(255, 255, 255, 0.8); /* 背景を少し透過させるなど */
}

.artwork-frame {
    display: inline-block; /* 画像を横並びにするため */
    margin: 10px;
    padding: 15px; /* 額縁の余白 */
    border: 10px solid #8B4513; /* 額縁の色（木目調など） */
    background-color: #fff; /* 絵画の背景 */
    box-shadow: 5px 5px 15px rgba(0,0,0,0.3); /* 額縁の影 */
    position: relative;
    transition: transform 0.2s ease-in-out; /* ホバーエフェクト用 */
}

.artwork-frame:hover {
    transform: scale(1.05); /* ホバー時に少し拡大 */
}

.artwork-frame img {
    display: block;
    max-width: 300px; /* フレーム内の画像の最大幅（可変にする場合はJSで調整） */
    max-height: 300px; /* フレーム内の画像の最大高さ（可変にする場合はJSで調整） */
    width: auto;
    height: auto;
    object-fit: contain; /* アスペクト比を保ちつつフレーム内に収める */
}

.artwork-info {
    text-align: center;
    margin-top: 10px;
}

.artwork-info h3 {
    margin: 5px 0;
    font-size: 1.1em;
}

.artwork-info p {
    margin: 0;
    font-size: 0.9em;
    color: #555;
}

/* スクロール検知エリア (オプション) */
.scroll-trigger {
    position: absolute;
    top: 0;
    bottom: 0;
    width: 15%; /* 画面端の15%を検知エリアとする */
    z-index: 10;
    /* background-color: rgba(0,0,255,0.1); デバッグ用 */
}
.scroll-trigger.left {
    left: 0;
    cursor: w-resize;
}
.scroll-trigger.right {
    right: 0;
    cursor: e-resize;
}


.post-form-section, .content-section {
    background-color: white;
    padding: 20px;
    margin-top: 30px;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
}

.post-form-section h2, .content-section h2 {
    margin-top: 0;
    color: #333;
    border-bottom: 2px solid #8B4513;
    padding-bottom: 10px;
}

#artworkForm div {
    margin-bottom: 15px;
}

#artworkForm label {
    display: block;
    margin-bottom: 5px;
    font-weight: bold;
}

#artworkForm input[type="text"],
#artworkForm input[type="file"] {
    width: 100%;
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 4px;
    box-sizing: border-box;
}

#artworkForm button {
    background-color: #8B4513;
    color: white;
    padding: 10px 20px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 1em;
}

#artworkForm button:hover {
    background-color: #A0522D;
}

footer {
    text-align: center;
    padding: 20px;
    background-color: #333;
    color: white;
    margin-top: 30px;
}
3. 動的機能 (JavaScript: script.js)
JavaScript

document.addEventListener('DOMContentLoaded', () => {
    const galleryContainer = document.getElementById('gallery');
    const artworkForm = document.getElementById('artworkForm');
    let artworks = []; // 投稿された作品を格納する配列 (最新のものが先頭)

    // 仮の作品データ (初期表示用)
    const initialArtworks = [
        {
            title: "サンプル作品1",
            artist: "アーティストA",
            src: "https://via.placeholder.com/300x200.png?text=Sample1" // ダミー画像
        },
        {
            title: "サンプル作品2",
            artist: "アーティストB",
            src: "https://via.placeholder.com/250x350.png?text=Sample2"
        },
        {
            title: "サンプル作品3",
            artist: "アーティストC",
            src: "https://via.placeholder.com/320x240.png?text=Sample3"
        }
    ];
    artworks = [...initialArtworks];
    renderArtworks();


    // 作品投稿フォームの処理
    artworkForm.addEventListener('submit', function(event) {
        event.preventDefault(); // フォームのデフォルト送信をキャンセル

        const title = document.getElementById('artworkTitle').value;
        const artist = document.getElementById('artistName').value;
        const fileInput = document.getElementById('artworkFile');
        const file = fileInput.files[0];

        if (file) {
            const reader = new FileReader();
            reader.onload = function(e) {
                const newArtwork = {
                    title: title,
                    artist: artist,
                    src: e.target.result, // 画像のData URL
                    originalWidth: 0, // 元の画像の幅
                    originalHeight: 0 // 元の画像の高さ
                };

                // 画像の元のサイズを取得するために一時的にImageオブジェクトを作成
                const img = new Image();
                img.onload = () => {
                    newArtwork.originalWidth = img.width;
                    newArtwork.originalHeight = img.height;

                    // 新しい作品を配列の先頭に追加
                    artworks.unshift(newArtwork);
                    renderArtworks(); // ギャラリーを再描画
                    artworkForm.reset(); // フォームをリセット
                }
                img.src = e.target.result;
            }
            reader.readAsDataURL(file); // ファイルをData URLとして読み込む
        } else {
            alert('画像ファイルを選択してください。');
        }
    });

    // ギャラリーに作品を描画する関数
    function renderArtworks() {
        galleryContainer.innerHTML = ''; // 既存の表示をクリア

        artworks.forEach(artwork => {
            const frame = document.createElement('div');
            frame.classList.add('artwork-frame');

            const img = document.createElement('img');
            img.src = artwork.src;
            img.alt = artwork.title;

            // 画像のサイズに合わせてフレーム（画像表示領域）のスタイルを調整
            // ここではCSSのmax-width/max-heightとobject-fitに任せるが、
            // より厳密にフレームサイズを画像に合わせる場合は、
            // artwork.originalWidth と artwork.originalHeight を使って
            // img要素やframe要素のwidth/heightを直接設定するロジックを追加できます。
            // 例:
            // const aspectRatio = artwork.originalWidth / artwork.originalHeight;
            // const displayWidth = 300; // 表示したい幅 (例)
            // const displayHeight = displayWidth / aspectRatio;
            // img.style.width = displayWidth + 'px';
            // img.style.height = displayHeight + 'px';
            // frame.style.width = (displayWidth + 30) + 'px'; // padding分考慮
            // frame.style.height = (displayHeight + 30 + 50) + 'px'; // paddingと情報表示エリア分考慮


            const info = document.createElement('div');
            info.classList.add('artwork-info');
            info.innerHTML = `<h3>${artwork.title}</h3><p>${artwork.artist}</p>`;

            frame.appendChild(img);
            frame.appendChild(info);
            galleryContainer.appendChild(frame);
        });
    }

    // ギャラリーの横スクロール機能
    let scrollInterval = null;
    const scrollSpeed = 10; // スクロール速度

    // スクロールトリガー要素の作成（オプション）
    const scrollTriggerLeft = document.createElement('div');
    scrollTriggerLeft.classList.add('scroll-trigger', 'left');
    galleryContainer.appendChild(scrollTriggerLeft);

    const scrollTriggerRight = document.createElement('div');
    scrollTriggerRight.classList.add('scroll-trigger', 'right');
    galleryContainer.appendChild(scrollTriggerRight);


    scrollTriggerLeft.addEventListener('mouseenter', () => {
        clearInterval(scrollInterval);
        scrollInterval = setInterval(() => {
            galleryContainer.scrollLeft -= scrollSpeed;
        }, 20); // 20ミリ秒ごと
    });

    scrollTriggerRight.addEventListener('mouseenter', () => {
        clearInterval(scrollInterval);
        scrollInterval = setInterval(() => {
            galleryContainer.scrollLeft += scrollSpeed;
        }, 20);
    });

    scrollTriggerLeft.addEventListener('mouseleave', () => {
        clearInterval(scrollInterval);
    });
    scrollTriggerRight.addEventListener('mouseleave', () => {
        clearInterval(scrollInterval);
    });

    // マウスがギャラリーコンテナから離れた場合もスクロールを停止
    galleryContainer.addEventListener('mouseleave', () => {
        // スクロールトリガーの外側でマウスが離れた場合に対応
        if (! (scrollTriggerLeft.matches(':hover') || scrollTriggerRight.matches(':hover'))) {
             clearInterval(scrollInterval);
        }
    });


    // 初期作品の描画
    renderArtworks();
});
解説
HTML (index.html)
基本的なページ構造（ヘッダー、ナビゲーションメニュー、メインコンテンツエリア、フッター）を定義します。
<title>タグでページタイトルを設定。
メニューバーは<nav>と<ul>、<li>で作成。
<section id="gallery">が投稿された画像を表示するエリアです。JavaScriptによって動的に内容が生成されます。
<section id="post">に画像投稿フォームを設置します。各入力欄には<label>で説明をつけ、required属性で入力必須としています。
ファイルアップロード欄は<input type="file">を使用し、accept属性でJPEGとPNG画像のみを受け付けるように指定しています。
CSS (style.css)
ページの背景: bodyセレクタのbackground-imageプロパティで美術館の回廊風の画像を指定します（実際の画像パスに置き換えてください）。background-size: cover;やbackground-attachment: fixed;で調整できます。
メニューバー: header nav ulなどのセレクタでスタイルを調整します。
額縁風フレーム: .artwork-frameクラスで作成します。
border: 額縁の太さや色。
padding: 絵と額縁の間の余白。
background-color: 絵の背景色（通常は白）。
box-shadow: 額縁に立体感を出すための影。
画像サイズに合わせてフレームを作成:
CSSのmax-width, max-heightとobject-fit: contain;を.artwork-frame imgに設定することで、画像の縦横比を保ったまま、指定した最大サイズ内に収まるようにします。
JavaScript側で画像の実際の寸法を取得し、それに基づいてimg要素や.artwork-frameのスタイルをより細かく動的に調整することも可能です（script.jsのコメントアウト部分参照）。
左右スクロール:
.gallery-containerにdisplay: flex;とoverflow-x: hidden;を設定し、横並びのコンテンツがはみ出た場合にスクロールバーが表示されないようにします（スクロールはJavaScriptで制御）。
.scroll-triggerクラスは、マウスカーソルを合わせるとスクロールが発生するエリアを定義します。position: absolute;でギャラリーコンテナの左右端に配置します。
JavaScript (script.js)
画像の表示と管理:
artworks配列で投稿された作品データを管理します。新しい作品はunshift()で配列の先頭に追加することで、最新のものが最も左（配列の最初）に来るようにします。
renderArtworks()関数で、artworks配列の内容に基づいてギャラリー内のHTMLを動的に生成・再描画します。
投稿フォームの処理:
フォームが送信された際、選択されたファイルをFileReaderで読み込み、Data URL（画像データをテキスト形式で表現したもの）として取得します。
新しい作品情報をartworks配列に追加し、ギャラリーを再描画します。
Imageオブジェクトを一時的に作成し、onloadイベントで画像の元の幅と高さを取得しています。これは、フレームサイズをより正確に画像に合わせたい場合に利用できます。
フレームの左端/右端にマウスオーバーでスクロール:
.scroll-trigger.leftと.scroll-trigger.rightという透明な要素をギャラリーの両端に配置します。
これらの要素にマウスカーソルが入ると（mouseenter）、setIntervalを使ってギャラリーコンテナのscrollLeftプロパティを連続的に変更し、スクロール効果を実現します。
マウスカーソルが要素から離れると（mouseleave）、clearIntervalでスクロールを停止します。
次のステップとして：

画像素材の準備: 美術館の回廊風の背景画像や、額縁に使用したいテクスチャなどを用意します。
CSSの調整: 用意した画像素材や、より詳細なデザインイメージに合わせてstyle.cssを調整してください。特に額縁のデザインは凝ることができます。
サーバーサイド実装 (必要な場合): 実際に画像をアップロードして永続的に保存・共有したい場合は、PHP、Node.js、Python (Flask/Django) などのサーバーサイド技術とデータベースの導入を検討してください。この場合、JavaScriptからはサーバーのAPIを呼び出して画像のアップロードや取得を行うことになります。
エラーハンドリングとUI改善: ファイルサイズの制限、不正なファイル形式のチェック、アップロード中のプログレス表示など、よりユーザーフレンドリーにするための改善を追加できます。
この構成案が、ご希望のWEBページ作成の一助となれば幸いです。


Sources





以下の条件を満たすWEBページを作成したい

・ページタイトル：ファンアート美術館

・メニューバー：このサイトについて、投稿する、問合せ

・ページの背景：美術館の回廊風

・投稿された画像ファイル（jpeg, pngなど）を額縁風のフレームに入れ1枚1枚掲載

　・投稿される画像サイズに合わせてフレームを作成する

　・閲覧したい作品（マウスのポインターが触れている作品）が中心に来るようにする

　・フレームの左端にマウスのポインターを合わせると左にスクロールする

　・フレームの右端にマウスのポインターを合わせると右にスクロールする

　・最新の画像（作品）と最古の画像（作品）が隣り合うように（循環するように）表示する

・画像（作品）投稿フォームに必要な要素

　・作品タイトル

　・作者名（アーティスト名）

　・ファイルアップロード欄




Show thinking
はい、承知いたしました。前回の内容に加えて、ご要望の新しいインタラクション（マウスオーバーした作品を中央に表示、循環スクロール）を盛り込んだWEBページの構成案を以下に提案します。

これらの新しい機能、特に「閲覧したい作品が中心に来るようにする」と「循環スクロール」はJavaScriptによる制御がより複雑になります。

注意点（再掲）：

実際にユーザーが画像をアップロードし、それがサーバーに保存されて他のユーザーにも表示されるようにするには、サーバーサイドのプログラミングが必要です。ここでの説明は、主にページの見た目とフロントエンドの動作に焦点を当てています。
美術館の回廊風の背景画像や、額縁風のフレームデザインは、具体的な画像素材や詳細なデザイン指示によってクオリティが大きく左右されます。
WEBページ構成案 (改訂版)
1. ページタイトルと基本構造 (HTML: index.html)
HTML構造は前回とほぼ同じですが、CSSやJavaScriptで制御しやすくするために、必要に応じてクラス名などを調整することがあります。

HTML

<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ファンアート美術館</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <header>
        <nav>
            <ul>
                <li><a href="#about">このサイトについて</a></li>
                <li><a href="#post">投稿する</a></li>
                <li><a href="#contact">問合せ</a></li>
            </ul>
        </nav>
    </header>

    <main>
        <section class="gallery-section">
            <div id="gallery-wrapper"> {/* スクロール制御のラッパー */}
                <div id="gallery" class="gallery-container">
                    {/* ここにJavaScriptで画像が追加されます (クローン含む) */}
                </div>
            </div>
            {/* 左右スクロール用のUIを追加することも可能 */}
            {/* <button id="scrollLeftBtn">&lt;</button> */}
            {/* <button id="scrollRightBtn">&gt;</button> */}
        </section>

        <section id="post" class="post-form-section">
            <h2>作品を投稿する</h2>
            <form id="artworkForm">
                <div>
                    <label for="artworkTitle">作品タイトル:</label>
                    <input type="text" id="artworkTitle" name="artworkTitle" required>
                </div>
                <div>
                    <label for="artistName">作者名（アーティスト名）:</label>
                    <input type="text" id="artistName" name="artistName" required>
                </div>
                <div>
                    <label for="artworkFile">ファイルアップロード:</label>
                    <input type="file" id="artworkFile" name="artworkFile" accept="image/jpeg, image/png" required>
                </div>
                <button type="submit">投稿する</button>
            </form>
        </section>

        <section id="about" class="content-section">
            <h2>このサイトについて</h2>
            <p>ファンアートを展示するオンライン美術館です。</p>
        </section>

        <section id="contact" class="content-section">
            <h2>問合せ</h2>
            <p>ご意見・ご要望はこちらまで。</p>
        </section>
    </main>

    <footer>
        <p>&copy; ファンアート美術館</p>
    </footer>

    <script src="script.js"></script>
</body>
</html>
2. スタイル設定 (CSS: style.css)
前回からの変更点や追加点に焦点を当てます。

CSS

/* 基本スタイルは前回と同様 */
body {
    font-family: sans-serif;
    margin: 0;
    background-color: #f0f0f0;
    /* background-image: url('path/to/corridor-background.jpg'); */
    /* background-size: cover; */
    /* background-attachment: fixed; */
}

header nav /* ...前回と同様... */
main /* ...前回と同様... */

.gallery-section {
    position: relative; /* 左右スクロールボタンなどを配置する場合の基準 */
    padding: 20px 0;
}

#gallery-wrapper {
    width: 100%;
    overflow: hidden; /* ここでスクロールバーを隠す */
    position: relative; /* スクロール検知エリアの基準 */
}

.gallery-container {
    display: flex; /* 画像を横並びにする */
    /* overflow-x: hidden; JavaScriptで制御するので不要になるかも */
    white-space: nowrap; /* 画像が折り返さないようにする */
    padding: 20px 0; /* 上下のパディング */
    min-height: 400px; /* ギャラリーの高さを確保 */
    position: relative;
    /* transition: transform 0.5s ease-out; スムーズスクロール用 (JSで制御) */
}

.artwork-frame {
    display: inline-block;
    margin: 10px 20px; /* 左右のマージンを少し広めにとることも考慮 */
    padding: 15px;
    border: 10px solid #8B4513;
    background-color: #fff;
    box-shadow: 5px 5px 15px rgba(0,0,0,0.3);
    transition: transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
    cursor: pointer; /* 中央表示の対象であることを示す */
    flex-shrink: 0; /* 無限スクロール時にアイテムが縮まないように */
}

.artwork-frame.is-active, /* 現在中央にある作品（参考） */
.artwork-frame:hover { /* ホバー中の作品のスタイル変更 */
    transform: scale(1.08);
    box-shadow: 8px 8px 20px rgba(0,0,0,0.4);
}

.artwork-frame img {
    display: block;
    max-width: 300px; /* 基本サイズ */
    max-height: 300px;/* 基本サイズ */
    width: auto;
    height: auto;
    object-fit: contain;
}

.artwork-info { /* ...前回と同様... */ }

/* スクロール検知エリア (マウスのポインターを合わせるとスクロール) */
.scroll-trigger {
    position: absolute;
    top: 0;
    bottom: 0;
    width: 10%; /* 画面端の10%を検知エリアとする */
    z-index: 10;
    /* background-color: rgba(0,0,255,0.05); デバッグ用 */
}
.scroll-trigger.left {
    left: 0;
    cursor: w-resize;
}
.scroll-trigger.right {
    right: 0;
    cursor: e-resize;
}

.post-form-section, .content-section, #artworkForm /* ...前回と同様... */
footer /* ...前回と同様... */
3. 動的機能 (JavaScript: script.js)
循環スクロールと中央表示のロジックが複雑になるため、ここでは基本的な考え方と実装の骨子を示します。完全にシームレスな無限ループにはさらなる調整が必要です。

JavaScript

document.addEventListener('DOMContentLoaded', () => {
    const galleryWrapper = document.getElementById('gallery-wrapper');
    const galleryContainer = document.getElementById('gallery');
    const artworkForm = document.getElementById('artworkForm');
    let artworks = []; // オリジナルの作品データ (最新のものが先頭)
    let scrollInterval = null;
    const scrollSpeed = 15; // 端でのスクロール速度
    const cloneCount = 3; // 前後に複製するアイテムの数（アイテム数に応じて調整）

    // 仮の作品データ (初期表示用)
    const initialArtworks = [
        { title: "作品 Alpha", artist: "作家 1", src: "https://via.placeholder.com/300x220.png?text=Alpha" },
        { title: "作品 Beta", artist: "作家 2", src: "https://via.placeholder.com/280x350.png?text=Beta" },
        { title: "作品 Gamma", artist: "作家 3", src: "https://via.placeholder.com/320x200.png?text=Gamma" },
        { title: "作品 Delta", artist: "作家 4", src: "https://via.placeholder.com/260x300.png?text=Delta" },
        { title: "作品 Epsilon", artist: "作家 5", src: "https://via.placeholder.com/310x250.png?text=Epsilon" }
    ];
    artworks = [...initialArtworks];
    renderArtworks();

    // 作品投稿フォームの処理
    artworkForm.addEventListener('submit', function(event) {
        event.preventDefault();
        const title = document.getElementById('artworkTitle').value;
        const artist = document.getElementById('artistName').value;
        const fileInput = document.getElementById('artworkFile');
        const file = fileInput.files[0];

        if (file) {
            const reader = new FileReader();
            reader.onload = function(e) {
                const newArtwork = {
                    title: title,
                    artist: artist,
                    src: e.target.result,
                    originalWidth: 0,
                    originalHeight: 0
                };
                const img = new Image();
                img.onload = () => {
                    newArtwork.originalWidth = img.width;
                    newArtwork.originalHeight = img.height;
                    artworks.unshift(newArtwork); // 最新を先頭に
                    renderArtworks();
                    artworkForm.reset();
                }
                img.src = e.target.result;
            }
            reader.readAsDataURL(file);
        } else {
            alert('画像ファイルを選択してください。');
        }
    });

    // ギャラリーに作品を描画する関数 (循環スクロール対応)
    function renderArtworks() {
        galleryContainer.innerHTML = ''; // クリア
        if (artworks.length === 0) return;

        // 循環表示のためにアイテムを複製
        const itemsToRender = [];
        if (artworks.length > 0 && artworks.length <= cloneCount * 2) { // アイテム数が少ない場合
            for (let i = 0; i < (cloneCount * 2 +1) / artworks.length +1 ; i++){ //表示アイテム数を確保するため繰り返し
                 itemsToRender.push(...artworks);
            }
        } else { //十分なアイテム数がある場合は前後にcloneCount分複製
            const clonesEnd = artworks.slice(0, cloneCount); // 先頭からcloneCount個 (末尾に追加用)
            const clonesStart = artworks.slice(artworks.length - cloneCount); // 末尾からcloneCount個 (先頭に追加用)
            itemsToRender.push(...clonesStart, ...artworks, ...clonesEnd);
        }


        itemsToRender.forEach((artwork, index) => {
            const frame = document.createElement('div');
            frame.classList.add('artwork-frame');
            // オリジナルアイテムかクローンかを区別する属性 (必要に応じて)
            // frame.dataset.originalIndex = artworks.indexOf(artwork);
            // frame.dataset.renderIndex = index;


            const imgEl = document.createElement('img');
            imgEl.src = artwork.src;
            imgEl.alt = artwork.title;
            // 画像サイズに合わせたフレーム調整 (前回のCSSに依存、またはJSで詳細制御)
            // 例: imgEl.style.maxWidth = artwork.originalWidth ? `${artwork.originalWidth}px` : '300px';

            const info = document.createElement('div');
            info.classList.add('artwork-info');
            info.innerHTML = `<h3>${artwork.title}</h3><p>${artwork.artist}</p>`;

            frame.appendChild(imgEl);
            frame.appendChild(info);
            galleryContainer.appendChild(frame);

            // マウスオーバーで作品を中央にスクロール
            frame.addEventListener('mouseenter', () => {
                scrollToCenter(frame);
            });
        });
        // 初期位置調整 (無限スクロールのため)
        // 全アイテムの幅を計算 (概算)
        if (artworks.length > 0 && artworks.length > cloneCount) {
             // 最初の「本物」のアイテム群の開始位置にスクロール
            const firstOriginalItem = galleryContainer.children[cloneCount];
            if (firstOriginalItem) {
                const initialScroll = firstOriginalItem.offsetLeft - (galleryWrapper.offsetWidth / 2) + (firstOriginalItem.offsetWidth / 2);
                galleryWrapper.scrollLeft = initialScroll;
            }
        }
    }

    // 要素をコンテナの中央にスムーズにスクロールする関数
    function scrollToCenter(element) {
        if (!element) return;
        const galleryRect = galleryWrapper.getBoundingClientRect();
        const elementRect = element.getBoundingClientRect();

        // 要素の中心がギャラリーの中心に来るように目標スクロール位置を計算
        const targetScrollLeft = galleryWrapper.scrollLeft + (elementRect.left - galleryRect.left) + (elementRect.width / 2) - (galleryRect.width / 2);

        galleryWrapper.scrollTo({
            left: targetScrollLeft,
            behavior: 'smooth'
        });
    }


    // 無限スクロールのための位置調整 (簡略版)
    galleryWrapper.addEventListener('scroll', () => {
        if (artworks.length === 0 || artworks.length <= cloneCount) return;

        const scrollLeft = galleryWrapper.scrollLeft;
        const scrollWidth = galleryWrapper.scrollWidth;
        const clientWidth = galleryWrapper.clientWidth;

        // オリジナルコンテンツ部分の幅を概算
        let originalContentWidth = 0;
        for (let i = cloneCount; i < galleryContainer.children.length - cloneCount; i++) {
            if (galleryContainer.children[i]) {
                 originalContentWidth += galleryContainer.children[i].offsetWidth + parseInt(getComputedStyle(galleryContainer.children[i]).marginLeft) + parseInt(getComputedStyle(galleryContainer.children[i]).marginRight);
            }
        }
        if (originalContentWidth === 0 && galleryContainer.children.length > 0) { // 概算が難しい場合のフォールバック
            const sampleItemWidth = galleryContainer.children[0].offsetWidth + parseInt(getComputedStyle(galleryContainer.children[0]).marginLeft) + parseInt(getComputedStyle(galleryContainer.children[0]).marginRight);
            originalContentWidth = sampleItemWidth * artworks.length;
        }


        // 右端近くまでスクロールしたら、先頭のクローン群の終わり（＝オリジナルの先頭）にジャンプ
        // 左端近くまでスクロールしたら、末尾のクローン群の始まり（＝オリジナルの末尾）にジャンプ
        // この閾値とジャンプ先の計算は、アイテムのマージンや正確な幅の合計に基づいて慎重に行う必要があります。

        const triggerOffset = clientWidth * 0.5; // スクロール調整のトリガーとなるオフセット

        if(scrollLeft >= originalContentWidth + (galleryContainer.children[cloneCount]?.offsetLeft || 0) - triggerOffset && originalContentWidth > 0){
            // 右にスクロールしすぎた場合、左（オリジナルの開始位置付近）に戻す
            galleryWrapper.scrollLeft -= originalContentWidth;
        } else if (scrollLeft <= (galleryContainer.children[cloneCount]?.offsetLeft || 0) - triggerOffset && originalContentWidth > 0) {
            // 左にスクロールしすぎた場合、右（オリジナルの終了位置付近）に戻す
            galleryWrapper.scrollLeft += originalContentWidth;
        }
    });


    // ギャラリーの左右端でのホバースクロール機能
    const scrollTriggerLeft = document.createElement('div');
    scrollTriggerLeft.classList.add('scroll-trigger', 'left');
    galleryWrapper.appendChild(scrollTriggerLeft); // galleryWrapperに配置

    const scrollTriggerRight = document.createElement('div');
    scrollTriggerRight.classList.add('scroll-trigger', 'right');
    galleryWrapper.appendChild(scrollTriggerRight); // galleryWrapperに配置

    scrollTriggerLeft.addEventListener('mouseenter', () => {
        clearInterval(scrollInterval);
        scrollInterval = setInterval(() => {
            galleryWrapper.scrollLeft -= scrollSpeed;
        }, 20);
    });
    scrollTriggerRight.addEventListener('mouseenter', () => {
        clearInterval(scrollInterval);
        scrollInterval = setInterval(() => {
            galleryWrapper.scrollLeft += scrollSpeed;
        }, 20);
    });
    const stopScroll = () => clearInterval(scrollInterval);
    scrollTriggerLeft.addEventListener('mouseleave', stopScroll);
    scrollTriggerRight.addEventListener('mouseleave', stopScroll);
    galleryWrapper.addEventListener('mouseleave', () => { // wrapperから出た時も止める
         if (! (scrollTriggerLeft.matches(':hover') || scrollTriggerRight.matches(':hover'))) {
            stopScroll();
         }
    });


    // 初期作品の描画
    renderArtworks();

    // ウィンドウリサイズ時に再計算が必要な場合
    // window.addEventListener('resize', () => {
    //     renderArtworks(); // レイアウトが崩れる可能性があるため再描画
    //     // または、中央表示やスクロール位置の再調整のみ行う
    // });
});
解説 (改訂版のポイント)
HTML (index.html)
<div id="gallery-wrapper"> を追加し、この要素の overflow: hidden; でスクロールバーを制御します。実際の横スクロールはこの gallery-wrapper で行います。
gallery-container は flex でアイテムを横一杯に広げる役割を担います。
CSS (style.css)
#gallery-wrapper: overflow: hidden; を設定します。
.artwork-frame: flex-shrink: 0; を追加して、コンテナ幅が足りない場合にアイテムが縮まないようにします。これは無限スクロールでアイテム幅が一定であることが重要なためです。
ホバー時のスタイルを少し強調 (transform: scale(1.08))。
.scroll-trigger: ギャラリーコンテナではなく、gallery-wrapper の中に配置するように変更しました。
JavaScript (script.js)
循環スクロールの実装:
renderArtworks関数内で、表示するartworks配列の前後に、配列の末尾と先頭から数個の要素を複製して追加（クローニング）します。これにより、端までスクロールしたように見せかけて、実際には反対側のクローンにシームレスに（またはそれに近く）移行できます。
cloneCount で前後に複製する数を指定します。アイテム数が少ない場合は、表示が途切れないように多めに複製するロジックを追加しました。
初期表示時に、最初の「本物」のアイテム群が見えるようにスクロール位置を調整します。具体的には、先頭のクローン群の幅だけ右にスクロールした状態から開始します。
galleryWrapper.addEventListener('scroll', ...) 内で、スクロール位置を監視します。スクロールが「本物」のコンテンツの境界を超えそうになったら、scrollLeft の値を1周分（本物のコンテンツ全体の幅）だけ増減させて、反対側のクローン領域にジャンプさせます。このジャンプが視覚的にスムーズに見えるように調整するのが無限ループスクロールの肝です。
注意: このサンプルでの無限スクロールのジャンプは簡略化されており、アイテムの正確な幅やマージン、表示されているアイテム数などによって、完璧にシームレスにするにはさらなる計算と調整が必要です。特にアイテムの幅が可変の場合は非常に複雑になります。
閲覧したい作品が中心に来るようにする:
各 .artwork-frame に mouseenter イベントリスナーを追加します。
scrollToCenter(element) 関数は、指定された要素 (element) が galleryWrapper の中央に来るように、galleryWrapper.scrollLeft の値を計算し、scrollTo({ behavior: 'smooth' }) を使ってスムーズスクロールさせます。
フレームの左端/右端でのスクロール:
前回同様、.scroll-trigger 要素を使いますが、これは galleryWrapper に対して動作するようにします。
「閲覧したい作品が中心に来る」機能と共存させるため、こちらは補助的なスクロール手段となります。ユーザーが細かく位置を調整したい場合や、カルーセルのように次々に見たい場合に役立ちます。
作品投稿と表示順: 新しい作品は artworks.unshift() で配列の先頭に追加され、renderArtworks() が呼び出されると、循環表示のロジックも含めて再描画されます。最新の作品は常に「本物」の作品群の先頭に位置することになります。
さらなる改善のための検討事項:

無限ループの精度: 現在の無限ループは、スクロールイベントで位置をジャンプさせていますが、アイテム幅の合計計算やジャンプのタイミングが正確でないと、カクつきや不自然な動きが生じることがあります。ライブラリ（例：Swiper.js, Flickity, Slick Carouselなど）を使用すると、これらの複雑な処理を任せることができます。
パフォーマンス: 画像数が多い場合、DOM要素の操作やクローンの生成がパフォーマンスに影響を与える可能性があります。仮想スクロール（表示領域に必要なアイテムだけを描画する技術）の導入も高度な改善策として考えられます。
レスポンシブデザイン: ウィンドウサイズが変更された際に、中央表示の位置計算や無限ループのロジックが正しく動作するように、リサイズイベントを監視して再計算/再描画処理を入れる必要があります。
タッチデバイス対応: スマートフォンやタブレットでのスワイプ操作にも対応すると、より使いやすくなります。
この改訂案が、よりインタラクティブな「ファンアート美術館」の実現に役立つことを願っています。